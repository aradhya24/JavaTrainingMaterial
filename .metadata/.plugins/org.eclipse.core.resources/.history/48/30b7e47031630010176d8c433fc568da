package SOLID.InventoryMS.coreservice;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import SOLID.InventoryMS.model.Product;
import SOLID.InventoryMS.notification.INotifier;
import SOLID.InventoryMS.valuation.IValuationStrategy;

public class InventoryService {
	private Map<String, Product> inventory = new HashMap<>();
	private List<INotifier> notifiers;
	private ReorderService reorderService;
	private IValuationStrategy valuationStrategy;
	
	public InventoryService(Map<String, Product> inventory, List<INotifier> notifiers, ReorderService reorderService,
			IValuationStrategy valuationStrategy) {
		super();
		this.inventory = inventory;
		this.notifiers = notifiers;
		this.reorderService = reorderService;
		this.valuationStrategy = valuationStrategy;
	}
	
	
	public void addProduct(Product product) {
		inventory.put(product.getProductName(),product);
	}
	
	public void removeStock(String productName , int quantity) {
		
		Product product = inventory.get(productName);
		
		if(product != null && product.getStock() >= quantity) {
			product.removeStock(quantity);
			System.out.println("Stock updated: Removed " + quantity + " units of '" + product.getProductName());
			
			System.out.println("Current Stock for '" + productName + "' : " + product.getStock());
			
			if(product.getStock() < product.getReorderThreshold()) {
				System.out.println("Reorder threshold reached for '"+ productName +"'. Triggering reorder...");
				product.addStock(20);
				System.out.println("Reorder placed for '" + quantity + "' units");
			}
		}
	}
	
	
	public void notifyAll(List<INotifier> notifiers) {
		for(INotifier notifier : notifiers) {
			notifier.notify();
		}
	}
	
	
	public void getInventoryValue() {
		
	}
	
}
