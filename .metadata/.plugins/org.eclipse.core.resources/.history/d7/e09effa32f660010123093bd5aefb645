package facadeassignment.tictactoe.model;

import java.util.Scanner;

public class GameEngine {

	private Player player1;
	private Player player2;
	private Player currentPlayer;

	public GameEngine(Player player1, Player player2, Player currentPlayer) {
		super();
		this.player1 = player1;
		this.player2 = player2;
		this.currentPlayer = player1;
	}

	public boolean isWinningMove(Board board, char symbol) {
		char[][] grid = board.getGrid();

		// Check rows and columns
		for (int i = 0; i < 3; i++) {
			if ((grid[i][0] == symbol && grid[i][1] == symbol && grid[i][2] == symbol)
					|| (grid[0][i] == symbol && grid[1][i] == symbol && grid[2][i] == symbol)) {
				return true;
			}
		}

		// Check diagonals
		if ((grid[0][0] == symbol && grid[1][1] == symbol && grid[2][2] == symbol)
				|| (grid[0][2] == symbol && grid[1][1] == symbol && grid[2][0] == symbol)) {
			return true;
		}

		return false;
	}

	public void switchPlayer() {
		currentPlayer = (currentPlayer == player1) ? player2 : player1;
	}

	public GameStatus playTurn(Board board) {

		Scanner scanner = new Scanner(System.in);

		int row = -1;
		int col = -1;
		boolean validMove = false;

		while (!validMove) {

			System.out.print(currentPlayer.getName() + "'s (" + currentPlayer.getSymbol()
					+ ") turn. Enter row and column (0-2): ");
			
			try {
				row = scanner.nextInt();
				col = scanner.nextInt();
				
				if(row < 0 || row > 2 || col < 0 || col > 2) {
				    System.out.println("Invalid input. Row and column must be between 0 and 2.");
				}
				else if(!board.isCellOccupied(row, col)) {
					System.out.println("Cell already occupied. Try again.");
				}
				else {
					board.placeSymbol(currentPlayer.getSymbol(), row, col);
					validMove = true;
				}
			}
			catch(Exception e) {
				System.out.println("Invalid input. Please enter numeric values.");
                scanner.nextLine();
			}
			

		}

		return GameStatus.CONTINUE;
	}

}
